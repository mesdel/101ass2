;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-reader.ss" "lang")((modname |Assignment 2|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-reader.ss" "lang")((modname pstream-delay) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/image)
(require 2htdp/universe)
(require rsound)

(define ps (make-pstream))

(define song
  (resample-to-rate
   FRAME-RATE
   (rs-scale
    0.25
    (rs-read/clip
     #;"/tmp/static.wav"
     #;"/tmp/ladder.wav"
     "/tmp/hbp.wav"
     0
     (* 30 FRAME-RATE)))))

;; a ws is
;; - (make-ws frame frame frame)
(define-struct ws [song-frame end-time delay-frames])
;; representing the next frame of the song to be
;; played, the time at which to play it, and the
;; number of delay frames from 0 up to MAX-DELAY-FRAMES

;; ex:
(make-ws 2423 700 3)
(make-ws 1123 0 9)

(define INITIAL-STATE
  (make-ws 0 0 0))

(define SLIDER-WIDTH 16)
(define SLIDER-HEIGHT 40)

(define SLIDER (rectangle SLIDER-WIDTH
                          SLIDER-HEIGHT
                          "solid"
                          "blue"))

(define BAR-WIDTH 400)
(define BAR-HEIGHT 40)

(define SLIDER-BG (rectangle BAR-WIDTH
                             BAR-HEIGHT
                             "solid"
                             "light gray"))


;; how long should each queued segment be, in seconds?
(define PLAY-SECONDS 1/20)
;; .. in frames?
(define PLAY-FRAMES (* PLAY-SECONDS FRAME-RATE))
;; .. as a fraction of the slider?
(define PLAY-POSNFRAC (/ PLAY-SECONDS (/ (rs-frames song) FRAME-RATE)))
;; how long should the big-bang ticks be?
(define TICK-LEN 1/40)
;; the longest lead time for which we'll queue the next sound
(define MAX-QUEUE-INTERVAL (* 3/80 FRAME-RATE))

;; the maximum delay in frames
(define MAX-DELAY 4000)

;; place the slider at the given position
;; ws -> image
(define (draw-slider ws)
  (place-image SLIDER
               (frames->slider-x
                (ws-delay-frames ws))
               (/ BAR-HEIGHT 2)
               SLIDER-BG))

;; 40%
(check-expect
 (draw-slider (make-ws 2243 1234 9))
 (place-image SLIDER
              (* (/ 9 MAX-DELAY) BAR-WIDTH)
              (/ BAR-HEIGHT 2)
              SLIDER-BG))

;; convert frames of delay to slider x position
;; number -> number
(define (frames->slider-x f)
  (* (/ f MAX-DELAY)
     BAR-WIDTH))

(check-expect (frames->slider-x 10)
              (* (/ 10 MAX-DELAY)
                 BAR-WIDTH))

;; convert slider x position to frames of delay
(define (slider-x->frames x)
  (* (/ x BAR-WIDTH)
     MAX-DELAY))

(check-expect (slider-x->frames 100)
              (* (/ 100 BAR-WIDTH)
                 MAX-DELAY))


;; move the slider to the position of
;; the mouse
;; ws number number event -> ws
(define (handle-mouse ws x y event)
  (cond [(or (string=? event "button-down")
             (string=? event "drag"))
         (make-ws (ws-song-frame ws)
                  (ws-end-time ws)
                  (slider-x->frames x))]
        [else ws]))

(check-expect
 (handle-mouse (make-ws 2243 1234 4) 320 14
               "button-down")
 (make-ws 2243 1234 (* MAX-DELAY (/ 320 BAR-WIDTH))))
(check-expect
 (handle-mouse (make-ws 2243 1234 0.4) 320 14
               "drag")
 (make-ws 2243 1234 (* MAX-DELAY (/ 320 BAR-WIDTH))))
(check-expect
 (handle-mouse (make-ws 2243 1234 0.4) 320 14
               "move")
 (make-ws 2243 1234 0.4))


;; if it's time, queue up the next section
;; of the song
(define (tick-fun ws)
  (cond [(time-to-play? (ws-end-time ws)
                        (pstream-current-frame ps))
         (both
          (queue-next-fragment
           (ws-song-frame ws)
           (ws-end-time ws)
           (round (ws-delay-frames ws)))
          (make-ws (increase-frame (ws-song-frame ws)
                                   PLAY-FRAMES
                                   (rs-frames song))
                   (+ (ws-end-time ws) PLAY-FRAMES)
                   (ws-delay-frames ws)))]
        [else ws]))

;; increase the play frame by the increment. If the next frame
;; would go over the end, reset it instead.
(define (increase-frame base incr limit)
  (cond [(< limit (+ base incr incr))
         0]
        [else
         (+ base incr)]))

(check-expect (increase-frame 14243 100 14300) 0)
(check-expect (increase-frame 14243 100 14500) 14343)

;; queue up the next fragment
(define (queue-next-fragment song-frame frame-to-play delay)
  (both
   (pstream-queue ps
                  (clip song song-frame (+ song-frame PLAY-FRAMES))
                  frame-to-play)
   (pstream-queue ps 
                  (clip song song-frame (+ song-frame PLAY-FRAMES))
                  (+ frame-to-play delay))))





;; is it time to play the next chunk, yet?
(define (time-to-play? end-frame cur-frame)
  (< (- end-frame cur-frame) MAX-QUEUE-INTERVAL))

(define (both a b) b)

;; when the left/right arrow keys are pressed, increase
;; or decrease the ... oh ...

;; the world state is a number between 0
;; and 1, representing the position of
;; the play head

(big-bang INITIAL-STATE
          [to-draw draw-slider]
          [on-mouse handle-mouse]
          [on-tick tick-fun TICK-LEN])